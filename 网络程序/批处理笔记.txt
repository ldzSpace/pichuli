rem ---------------------------------------------------------------------------------------------功能

1,开启变量延迟:

a、命令:setlocal EnableDelayedExpansion

b、关闭命令:endlocal

c、之前定义的变量仍然有效(endlocal后也有效)，但endlocal后，在变量延迟过程中定义的变量无效

d、无法处理"!"。要引用"!"方法为:set a="^!",引用命令为:!a:~1,1!

e、开启变量延迟后,在for、if语句内部用%a%的形式来引用变量a和不开启变量延迟效果是一样的

2,用call代替变量延迟

for命令是一个命令行，所以for内部无法体现变量的变化(除非使用变量延迟)。而在for内部用call命令跳转，就能体现变量的变化了！相当于启用变量延迟。但是好处在于能处理"!"，且变量不会无效。

3,获取指定名称规则的文件路径

for /f "tokens=* delims=" %%i in ('dir /a-d/b/s "*.flac" "*.cue"') do (command)

4,用if判断的注意事项

获取路径后要先去除开头的引号才能用if命令判断比较

5,替换文件

replace 用于替换的文件的路径 被替换文件所在路径(不包括文件)(若在当前位置则缺省)

6,路径分解

@echo off

set /p pathly=路径 

::此处路径中的%要用%转义

set pathly="%pathly:"=%"

::去掉变量中的引号，并且在变量两边加上引号

call :获取源信息 %pathly%

exit

:获取源信息

set pathly="%~1"

::注意,若输入pathly=d^&，则此处pathly为 "d^^&" (带引号)，^被自动转化为^^，而&没有转化，下面的同理

set pathly=%pathly:&=^&%

set pathly=%pathly:|=^|%

set pathmb="%~dp1"

set pathmb=%pathmb:&=^&%

set pathmb=%pathmb:|=^|%

set name="%~n1"

set name=%name:&=^&%

set name=%name:|=^|%

set type="%~x1"

set type=%type:&=^&%

set type=%type:|=^|%

set pathly=%pathly:"=%

set pathmb=%pathmb:"=%

set name=%name:"=%

set type=%type:"=%

goto :eof

7,压缩与解压

a,压缩:

参考:---WinRAR 中文帮助---目录---命令行模式---开关、命令、命令行语法

打开WinRAR 中文帮助方法:任意选择一个文件(或文件夹)---添加到压缩文件---单击右下角的帮助

(1)下面代码中-hp"123"表示密码设置为123

(2)-rr"10p"表示添加1/100的恢复记录，最多为10/100的恢复记录，即-rr"100p"

(3)-df表示压缩后删除源文件

(4)a表示压缩命令

start "" winrar.exe a -df -hp"123" -rr"10p" "目标文件夹文件夹\目标名称.txt" "待压缩文件所在文件件夹\待压缩文件.txt"

b,解压

(1)-p"123"表示解压密码为123

(2)e表示解压命令(忽略路径)

start "" winrar.exe e -p"123" "待解压文件所在文件夹\压缩文件.rar" "目标文件夹" "*.*"

(3)x表示解压命令(保存压缩文件内部的完整路径)

start "" winrar.exe x -p"123" "待解压文件所在文件夹\压缩文件.rar" "目标文件夹" "*.*"

c,常用开关

(1)-ap:设置内部路径

start "" winrar.exe a -df -apa\p -hp"123" -rr"10p" "目标文件夹文件夹\目标名称.txt" "待压缩文件所在文件件夹\待压缩文件.txt"

内部路径为:a\p

(2)-ep1:从名称中排除主文件夹

(3)-ep: 名称中排除路径

8,打开文件夹、文件、应用程序

a,文件夹:explorer "文件夹"

b,文本文档:start /min "" "文本文档.txt"

c,QQ:start "" "腾讯QQ.exe"

9,代码注释

a,用::注释

(1),换行后写入---::注释语---换行继续写代码

(2),for语句、if语句一个整体在代码执行是是看作一行的---故在for内部用::写注释容易出错

b,用"rem "注释

(1),换行写入---rem 注释语---换行继续写代码

c,比较

:: 确实可以起到rem 的注释作用, 而且更简洁有效; 但有两点需要注意: 

第一, 除了 :: 之外, 任何以 :开头的字符行, 在批处理中都被视作标号, 而直接忽略其后的所有内容, 只是为了与正常的标号相区别, 建议使用 goto 所无法识别的标号, 即在 :后紧跟一个非字母数字的一个特殊符号. 

第二, 与rem 不同的是, ::后的字符行在执行时不会回显, 无论是否用echo on打开命令行回显状态, 因为命令解释器不认为他是一个有效的命令行, 就此点来看, rem 在某些场合下将比 :: 更为适用; 另外, rem 可以用于 config.sys 文件中. 

10,重定向

a,方式1

(echo,1)>a.txt

(echo,2

echo,3)>>a.txt

b,方式2---如果echo,a>b.txt中的a是数字会导致出错

echo,a>b.txt

echo,b>>b.txt

c,方式3

>c.txt echo,1

>>c.txt echo,2

>>c.txt (echo,3)

11,比较文本中数据大小

参考:AKB文档---制作CUE时间索引文件

12,set命令

a,变量名的要求

(1)不能使特殊字符，即不能包括以下的字符

" < > | & ^ % /

不过 ( 以及 )能参与命名

(2)一些不常用但允许的使用的情况

、 中文 ! @

(3)特殊情况的情况

(a),*以及数字字符---下面代码中环境变量*被定义了且有值，但%*%的引用方式无法引用其值，原因是解释器执行代码的顺序---解释器行为:判断结构(%*视为脚本参数后面的百分号落单无意义)---显示%*的值---要想引用只要开启变量延迟用!*!的形式来引用，%0、%1....同理

set *=3

echo,%*%

(b),下面命令要求用户为变量a输入值,若输入空格或者输入&等没有转义的特殊字符，则a的值就是空格或者特殊字符，a是被定义的。

set /p a=

命令解释器行为(输入后):将空格或特殊字符赋值给a(此处的特殊字符在解释时是作为字符串而不是特殊字符的)

(c),下面命令中&是特殊字符,a是没有定义的

set a=&

命令解释器行为:判断结构(&没有转义，故当做两个命令的逻辑符号“且”)---运行"set a="---然后允许一个空命令

(d),下面定义的变量允许字符串中的特殊字符不需要转义

set a="&|^"

命令解释器行为:判断结构---""能够转义中间特殊字符(除了%及")---"&|^"一个整体作为字符串赋值给a

(e),变量的引用

(e).1 set a=^&

echo,1%a%echo,2

命令解释器行为:判断第一句结构--&被转义字符^转义成字符---将字符&赋值给a---判断第二句结构---对百分号闭合的字符串进行匹配---环境变量空间中a的值为&---用&替换%a%---单独一个&被解释为两个命令的逻辑符号"且"---运行echo,1---然后运行echo,2---故结果是第一行输出1，第二号输出2

(e).2 set a=&

echo,"%%%a%%b%"

命令解释器行为:判断结构---%%%a%%b%按顺序解释为---有三对闭合的字符串%%、%a%及%b%---%%中%将%转义成普通字符---%a%:在环境变量空间中a的值为&---%b%:环境变量空间中没有变量b，%b%用空串替换---用%替换%%,用&替换%a%,去除%b%---"%&"中:%是普通字符，""将中间的特殊字符&转义---将"%&"一个整体作为字符串显示出来

(e).3 echo,"%"

命令解释器行为:有落单的%，落单的%用空串替换---输出""

(f),综合分析

b,变量中的字符替换

(1)set a=%a:"=%

命令解释器行为:先去除变量a中的引号，并把结果赋值给a---set a=%a%

略

13,命令解释器扩展环境变量的行为过程

首先读取命令行的一条完整语句(而for、if的一个整体命令会为一条完整语句)，在进行一些先期的预处理之后，命令被解释执行之前，会对其中用百分号闭合的字符串进行匹配，如果在环境空间中找到了与字符串相匹配的环境变量，则用其值替换掉原字符串及百分号本身，如果未得到匹配，则用一个空串替换，这个过程就是环境变量的“扩展”，它仍然属于命令行的预处理范畴。

14,不换行重定向法

参考：AKB 文档---提取歌名---不换行重定向法

15,判断路径是文件还是文件夹

a,pushd可以换成cd

命令解释器行为:(2>pushd "d:\aut.t")---将工作目录改为d:\aut.t---如果发生错误---执行"||"后面的命令---如果不发生错误则不执行"||"后的命令

@echo off

(2>pushd "d:\aut.t")||(echo,是文件&goto end)

echo,是文件夹

:end

pause>nul

rem ---------------------------------------------------------------------------------------------功能 end

rem ---------------------------------------------------------------------------------------------命令

1,for命令

a,for命令内部的变量注意点

(1)、在for语句内部引用的变量在for结束之前引用的效果都是不变的，除非开启变量延迟或者用call跳出后处理变量,但跳回后还是一样。

例:set a=1

for /l in (1,1,10) do (

set /a a=%a%+1

)

echo,%a%

pause>nul

exit

分析:最后的结果为2,因为%a%的值总是1,这相当于在for内部%a%被赋值给另一个变量b，一切与%a%有关的语句中都把%a%用变量b来代替包括与a本身有关的语句,如上句中的set /a a=%a%+1

(2)、在开启变量延迟时for内部还是能用%a%来引用变量a,但是这样引用变量在for结束之前引用的效果也是不变的。

b,/f

(1)、下面代码中,若a.txt为空，则不会执行do后的语句

for /f "usebackq tokens=* delims= " %%i in ("a.txt") do (

commed

)

(2)、下面代码中,若a.txt的行数(不包括空行)少于4,则不会执行do后的语句

for /f "usebackq tokens=* skip=3 delims= " %%i in ("a.txt") do (

commed

)

c,skip参数

(1)命令解释器读到skip=0会发生错误

(2)skip忽略的行包括空行,故最好处理无空行的文本

d,对于%%i命令处理器解释行为

(1)%%i中的任何符号都被当做普通字符,不需要转义

echo,%%>a.txt

for /f "tokens=*" %%i in (a.txt) do (

call :a %%%%i

)

pause

exit

:a

echo,%1

goto :eof

命令解释器行为---算出%%%%i的值---判断结构%%、%%1---闭合的%%被转义成%,%%1表示a.txt的内容:%---故%%%%i的值为%%---将值赋值给%1(赋值时两个%都是普通字符)---echo,%1---将%1用其值代替---echo,%%---结果为%---因此当%%i参与参数传递时，不能保证内容的完整性

(2)支持"%%~dpi"的扩展形式

2,if命令

a,/i开关

(1),说明要进行的字符串比较不分大小写(在数字比较时也可以用:如果 string1 和 string2 都是由数字组成的，字符串会被转换成数字，进行数字比较。)

(2),if [/i] string1 compare-op string2 command

compare-op可以是

EQU - 等于

NEQ - 不等于

LSS - 小于

LEQ - 小于或等于

GTR - 大于

GEQ - 大于或等于

b,if defined variable command语句

(1),例:if defined act echo,存在变量act

分析:先判断act变量是否存在---是就显示:存在变量act

(2),可以用set "act=" 来取消act变量的定义

3,call命令

a,参数传递

(1),在for中，下面的语句能实现无疏漏的参数传递(%%i中的引号也不会丢失),而关于引号处理可以参考---功能---6 路径分解

call :标号 "%%~i"

(2),若%%i没有值(为空)，则

call :标号 "%%~i"

:标号

set b="%~1"

   ::上面--if defined b为真

set b="%b:"=%"

set b="%b:&=^&%"

set b="%b:|=^|%"

set b="%b:"=%"

   ::此处--if defined b为假

4,ren命令

a,批量更改文件格式,下面代码中的*.txt也可以使用通配符?，如a?.txt(不要有空格),而?能够匹配空格、一般字符以及没有的内容。

for /f "tokens=*" %%i in (dir/b/a-d/s *.txt') do (

ren "%%i" "*".zlb

)

5,dir命令

a,显示d盘的文件和文件夹(不包括子文件夹)

dir /b d:\

b,显示d盘的每一个没有子文件夹的文件夹(全盘)

dir /b/s/ad d:\

c,显示d盘所有的有.bat后缀的文件或文件夹

dir /b/s d:\*.bat

d,显示d盘所有的有.bat后缀的文件(常用)

dir /b/s/a-d d:\*.bat

e,参数意义

显示目录中的文件和子目录列表。

DIR [drive:][path][filename] [/A[[:]attributes]] [/B] [/C] [/D] [/L] [/N]

  [/O[[:]sortorder]] [/P] [/Q] [/R] [/S] [/T[[:]timefield]] [/W] [/X] [/4]

  [drive:][path][filename]

              指定要列出的驱动器、目录和/或文件。

  /A          显示具有指定属性的文件。

  属性         D  目录                R  只读文件

               H  隐藏文件            A  准备存档的文件

               S  系统文件            I  无内容索引文件

               L  解析点             -  表示“否”的前缀

  /B          使用空格式(没有标题信息或摘要)。

  /C          在文件大小中显示千位数分隔符。这是默认值。用 /-C 来

              禁用分隔符显示。

  /D          跟宽式相同，但文件是按栏分类列出的。

  /L          用小写。

  /N          新的长列表格式，其中文件名在最右边。

  /O          用分类顺序列出文件。

  排列顺序     N  按名称(字母顺序)     S  按大小(从小到大)

               E  按扩展名(字母顺序)   D  按日期/时间(从先到后)

               G  组目录优先           -  反转顺序的前缀

  /P          在每个信息屏幕后暂停。

  /Q          显示文件所有者。

  /R          显示文件的备用数据流。

  /S          显示指定目录和所有子目录中的文件。

  /T          控制显示或用来分类的时间字符域。

  时间段      C  创建时间

              A  上次访问时间

              W  上次写入的时间

  /W          用宽列表格式。

  /X          显示为非 8.3 文件名产生的短名称。格式是 /N 的格式，

              短名称插在长名称前面。如果没有短名称，在其位置则

              显示空白。

  /4          用四位数字显示年

可以在 DIRCMD 环境变量中预先设定开关。通过添加前缀 - (破折号)

来替代预先设定的开关。例如，/-W。

6,pushd命令

a,把"d:\我的文件夹"添加到工作目录表

pushd "d:\我的文件夹"

工作目录---此时"d:\我的文件夹"在工作目录表中最顶端---当前工作目录便是工作目录中最顶端的目录

b,删除工作目录中最顶端的目录

popd

工作目录---新工作目录表中最顶端的目录是新的工作目录

c,注意到

(1)初始的工作目录为批处理所在目录

(2)用popd删除了所有工作目录后工作目录变为初始的工作目录

rem ---------------------------------------------------------------------------------------------命令 end

rem ---------------------------------------------------------------------------------------------注意点

1,重定向注意到

a,若变量a的末尾是数字,则echo,%a%>a.txt或echo,%a%>>a.txt会出错，echo,3>a.txt也会出错---只要重定向符号前没数字就行---如改写为(echo,3)>a.txt就行了

b,echo,%a%>>a(a).txt会出错---a(a).txt中含有的括号是特殊字符---应改写为echo,%a%>>a^(a^).txt或echo,%a%>>"a(a).txt"---其它特殊字符同理

rem ---------------------------------------------------------------------------------------------注意点 end

